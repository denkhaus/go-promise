package Q

type ProgressFunc func(data interface{})
type Progressor interface {
	Notify(data interface{})
}

type progressor struct {
	ch chan interface{}
}

///////////////////////////////////////////////////////////////////////////////////////
// Notify
///////////////////////////////////////////////////////////////////////////////////////
func (p *progressor) Notify(data interface{}) {
	p.ch <- data
}

///////////////////////////////////////////////////////////////////////////////////////
// onProgress
///////////////////////////////////////////////////////////////////////////////////////
func (p *progressor) onProgress(progressFunc ProgressFunc) {

	go func() {
		for data := range p.ch {
			progressFunc(data)
		}
	}()
}

///////////////////////////////////////////////////////////////////////////////////////
// NewProgressor
///////////////////////////////////////////////////////////////////////////////////////
func NewProgressor() *progressor {
	p := &progressor{}
	p.ch = make(chan interface{})
	return p
}
