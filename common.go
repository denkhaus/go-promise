package Q

import (
	"reflect"
)

var (
	DeferredType = reflect.TypeOf(Deferred{})
	PromiseType  = reflect.TypeOf(Promised{})
)

///////////////////////////////////////////////////////////////////////////////////////
// toValueArray
///////////////////////////////////////////////////////////////////////////////////////
func fromValueArray(in []reflect.Value) []interface{} {

	out := make([]interface{}, len(in))

	for idx, val := range in {
		out[idx] = val.Interface()
	}

	return out
}

///////////////////////////////////////////////////////////////////////////////////////
// toValueArray
///////////////////////////////////////////////////////////////////////////////////////
func toValueArray(in []interface{}) []reflect.Value {
	out := make([]reflect.Value, len(in))
	for idx, val := range in {
		out[idx] = reflect.ValueOf(val)
	}

	return out
}
